import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getUserProfile } from "../api/api";

const ProfilePage = () => {
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          throw new Error("No token found");
        }
        const data = await getUserProfile(token);
        setProfile(data);
      } catch (error) {
        console.error("Failed to fetch profile:", error);
        setError("Failed to fetch profile");
        navigate("/login");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [navigate]);

  const handleLevelSelection = () => {
    navigate("/levels");
  };

  // üîπ STYLES OBJECT
  const styles = {
    background: {
      height: "100vh",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      backgroundImage:
        'url("https://images.unsplash.com/photo-1506748686214-e9df14d4d9d0")', // Northern Lights
      backgroundSize: "cover",
      backgroundPosition: "center",
      position: "relative",
      padding: "20px",
      textAlign: "center",
      color: "white",
    },
    topText: {
      position: "absolute",
      top: "20px",
      fontSize: "14px",
      width: "90%",
      textAlign: "center",
      opacity: 0.9,
    },
    card: {
      position: "relative",
      background: "rgba(0, 0, 0, 0.85)", // Darker background
      padding: "40px",
      borderRadius: "12px",
      width: "450px",
      minHeight: "300px", // Makes the card longer
      textAlign: "center",
      boxShadow: "0px 5px 15px rgba(0, 0, 0, 0.5)",
      color: "white", // Ensures text is bright
      zIndex: 2,
    },
    heading: {
      fontSize: "26px",
      fontWeight: "bold",
      marginBottom: "10px",
    },
    text: {
      opacity: 0.9,
      fontSize: "14px",
    },
    subText: {
      fontSize: "12px",
      opacity: 0.7,
      marginTop: "10px",
    },
    button: {
      background: "#FFC107",
      border: "none",
      padding: "12px 20px",
      borderRadius: "6px",
      fontSize: "16px",
      fontWeight: "bold",
      color: "black",
      cursor: "pointer",
      marginTop: "20px",
    },
    bottomText: {
      position: "absolute",
      bottom: "20px",
      fontSize: "12px",
      width: "90%",
      textAlign: "center",
      opacity: 0.8,
    },
  };

  return (
    <div style={styles.background}>
      <p style={styles.topText}>
        üåç Welcome to your profile! Explore your learning journey and track your progress.
      </p>

      <div style={styles.card}>
        {loading ? (
          <p>Loading...</p>
        ) : error ? (
          <p>{error}</p>
        ) : (
          <>
            <h1 style={styles.heading}>Welcome, {profile.name}</h1>
            <p style={styles.text}>
              Your personalized dashboard for growth and knowledge.
            </p>
            <p style={styles.subText}>
              üìå Track your progress and achievements.  
              üî• Join interactive learning sessions.  
              üöÄ Access exclusive learning materials.
            </p>
            <button onClick={handleLevelSelection} style={styles.button}>
              Choose Level
            </button>
            <p style={styles.subText}>
              Need help? <a href="/support" style={{ color: "#FFC107", textDecoration: "none" }}>Visit Support</a>
            </p>
          </>
        )}
      </div>

      <p style={styles.bottomText}>
        üöÄ Learn, grow, and achieve your dreams.  
        <br /> Made with ‚ù§Ô∏è for lifelong learners.
      </p>
    </div>
  );
};

export default ProfilePage;


webapp/
‚îú‚îÄ‚îÄ backend/                     
‚îÇ   ‚îú‚îÄ‚îÄ controllers/             # Handles request logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audioController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adminController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ courseController.js   # New - Handles course logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ facultyController.js  # New - Handles faculty logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentController.js  # New - Handles payment logic
‚îÇ   ‚îú‚îÄ‚îÄ models/                  # Defines database models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userModel.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audioModel.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ purchaseModel.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ facultyModel.js       # New - Faculty schema
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ courseModel.js        # New - Course schema
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentModel.js       # New - Payment schema
‚îÇ   ‚îú‚îÄ‚îÄ routes/                  # API endpoint definitions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authRoutes.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userRoutes.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audioRoutes.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adminRoutes.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ facultyRoutes.js      # New - Faculty endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ courseRoutes.js       # New - Course endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ levelRoutes.js        # New - Level endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paymentRoutes.js      # New - Payment endpoints
‚îÇ   ‚îú‚îÄ‚îÄ config/                  # Configuration files
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js          # Database connection file
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stripe.js            # Payment gateway config
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database/            # New - Database folder
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ learnconnect_new.db  # SQLite database file
‚îÇ   ‚îú‚îÄ‚îÄ middleware/              # Middleware functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authMiddleware.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ errorMiddleware.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/                   # Utility functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ generateId.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ saveFile.js
‚îÇ   ‚îú‚îÄ‚îÄ uploads/                 # (Optional) Storage for uploaded files
‚îÇ   ‚îú‚îÄ‚îÄ .env                     # Environment variables
‚îÇ   ‚îú‚îÄ‚îÄ .gitignore                # Git ignore file
‚îÇ   ‚îú‚îÄ‚îÄ package.json              # Backend dependencies
‚îÇ   ‚îú‚îÄ‚îÄ server.js                 # Main backend server file
‚îÇ   ‚îú‚îÄ‚îÄ README.md                 # Backend documentation (if any)
‚îÇ
‚îú‚îÄ‚îÄ frontend/                     # Frontend (React)
‚îÇ   ‚îú‚îÄ‚îÄ public/                   # Static assets
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.html            # Main HTML file
‚îÇ   ‚îú‚îÄ‚îÄ src/                      # Source files
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/           # UI Components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AudioPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AdminPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HomePage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProfilePage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LevelPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacultyListPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CourseListPage.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Card.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PaymentPage.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ context/              # React context API
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AudioContext.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/                  # API calls
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js                # Main React component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js              # React entry point
‚îÇ   ‚îú‚îÄ‚îÄ .env                      # Frontend environment variables
‚îÇ   ‚îú‚îÄ‚îÄ .gitignore                 # Git ignore file
‚îÇ   ‚îú‚îÄ‚îÄ package.json               # Frontend dependencies
‚îÇ   ‚îú‚îÄ‚îÄ README.md                  # Frontend documentation (if any)
‚îÇ
‚îú‚îÄ‚îÄ README.md                      # Project-wide documentation
‚îú‚îÄ‚îÄ package.json                    # Root-level package file (if monorepo setup)
‚îî‚îÄ‚îÄ .gitignore                      # Global git ignore
import React, { createContext, useState, useEffect } from 'react';

// Create a context
export const AudioContext = createContext();

// Create a provider component
export const AudioProvider = ({ children }) => {
  // Load initial audio data from localStorage if available
  const [audioData, setAudioData] = useState(() => {
    const savedAudioData = localStorage.getItem('audioData');
    return savedAudioData ? JSON.parse(savedAudioData) : [
      { id: 1, title: 'Lecture 1', url: '/audios/audio1.mp3', courseId: 33, level: 100, faculty: 'Faculty of Engineering' },
      { id: 2, title: 'Lecture 2', url: '/audios/audio2.mp3', courseId: 34, level: 200, faculty: 'Faculty of Engineering' },
      { id: 3, title: 'Lecture 3', url: '/audios/audio3.mp3', courseId: 2, level: 100, faculty: 'Faculty of Arts' },
      { id: 4, title: 'Lecture 4', url: '/audios/audio4.mp3', courseId: 2, level: 200, faculty: 'Faculty of Arts' },
      // Add more audio data as needed
    ];
  });

  useEffect(() => {
    // Save audio data to localStorage whenever it changes
    localStorage.setItem('audioData', JSON.stringify(audioData));
  }, [audioData]);

  const addAudio = (newAudio) => {
    console.log('Adding audio:', newAudio);
    setAudioData([...audioData, newAudio]);
  };

  const deleteAudio = (id) => {
    setAudioData(audioData.filter(audio => audio.id !== id));
  };

  return (
    <AudioContext.Provider value={{ audioData, addAudio, deleteAudio }}>
      {children}
    </AudioContext.Provider>
  );
};


// AudioPage

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const AudioPage = () => {
  const [audios, setAudios] = useState([]);
  const [filteredAudios, setFilteredAudios] = useState([]);
  const { level, courseId } = useParams();

  useEffect(() => {
    const fetchAudios = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/audios');
        console.log('Fetched audios:', response.data);
        setAudios(response.data);
      } catch (error) {
        console.error('Error fetching audios:', error);
      }
    };

    fetchAudios();
  }, []);

  useEffect(() => {
    if (audios.length > 0) {
      const filtered = audios.filter(audio =>
        audio.level === level && audio.courseId === courseId
      );
      console.log('Filtered audios:', filtered);
      setFilteredAudios(filtered);
    }
  }, [audios, level, courseId]);

  const handleDownloadClick = (audioId) => {
    console.log(`Download audio with ID: ${audioId}`);
  };

  return (
    <div>
      <h1>Audio Page for Course ID: {courseId}, Level: {level}</h1>
      {filteredAudios.length > 0 ? (
        filteredAudios.map(audio => (
          <div key={audio.id}>
            <h2>{audio.title}</h2>
            <audio controls>
              <source src={`http://localhost:5000${audio.url}`} type="audio/mpeg" />
              Your browser does not support the audio element.
            </audio>
            <button onClick={() => handleDownloadClick(audio.id)}>Download</button>
          </div>
        ))
      ) : (
        <p>No audio files found for the selected criteria.</p>
      )}
    </div>
  );
};

export default AudioPage;