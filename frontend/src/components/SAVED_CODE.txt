import React, { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';

const PaymentSuccessPage = () => {
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const reference = queryParams.get('reference');

    if (reference) {
      handlePaymentSuccess(reference);
    }
  }, [location.search]);

  const handlePaymentSuccess = async (reference) => {
    try {
      const token = localStorage.getItem("token"); // Assuming the JWT token is stored
      const audioId = localStorage.getItem("audioId"); // Assuming the audio ID is stored

      if (!token || !audioId) {
        throw new Error("Token or Audio ID not found");
      }

      const verifyResponse = await axios.post('https://learnconnect-backend.onrender.com/api/payment/verify', {
        reference,
        audioId,
      }, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      if (verifyResponse.data.success) {
        navigate(`/download/${audioId}`);
      } else {
        alert('Payment verification failed');
      }
    } catch (error) {
      console.error('Payment verification or purchase recording error:', error);
      alert('Payment verification or purchase recording error');
    }
  };

  return (
    <div>
      <h1>Payment Successful</h1>
      <p>Verifying payment, please wait...</p>
    </div>
  );
};

export default PaymentSuccessPage;




import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const DownloadPage = () => {
  const { audioId } = useParams();
  const navigate = useNavigate();
  const [audioUrl, setAudioUrl] = useState('');

  useEffect(() => {
    const checkPurchase = async () => {
      try {
        const userId = localStorage.getItem("userId"); // Assuming the user ID is stored in localStorage

        if (!userId) {
          throw new Error("No user ID found");
        }

        const response = await axios.get('https://learnconnect-backend.onrender.com/api/purchase/check', {
          params: {
            userId,
            audioId
          }
        });

        if (response.data.success) {
          // Fetch the audio URL from your audios table
          const audioResponse = await axios.get(`https://learnconnect-backend.onrender.com/api/audios/${audioId}`);
          setAudioUrl(audioResponse.data.url);
        } else {
          alert('You have not purchased this audio.');
          navigate('/');
        }
      } catch (error) {
        console.error('Error checking purchase:', error);
        alert('Error checking purchase.');
        navigate('/');
      }
    };

    checkPurchase();
  }, [audioId, navigate]);

  return (
    <div>
      <h1>Stream Your Purchased Audio</h1>
      {audioUrl ? (
        <audio controls>
          <source src={audioUrl} type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
      ) : (
        <p>Loading audio...</p>
      )}
    </div>
  );
};

export default DownloadPage;





PurchaseRoute  

const express = require('express');
const router = express.Router();
const db = require('../config/database'); // Ensure the path is correct

// Route to record a purchase
router.post('/purchase', (req, res) => {
    const { userId, audioId } = req.body;

    if (!userId || !audioId) {
        return res.status(400).json({ error: 'User ID and Audio ID are required.' });
    }

    const query = `INSERT INTO purchases (userId, audioId) VALUES (?, ?)`;
    db.run(query, [userId, audioId], function(err) {
        if (err) {
            console.error('Error inserting purchase record:', err.message);
            return res.status(500).json({ error: 'Failed to record purchase.' });
        }
        res.status(200).json({ success: true, purchaseId: this.lastID });
    });
});

// Route to check if a purchase exists
router.get('/check', (req, res) => {
    const { userId, audioId } = req.query;

    if (!userId || !audioId) {
        return res.status(400).json({ error: 'User ID and Audio ID are required.' });
    }

    const query = `SELECT * FROM purchases WHERE userId = ? AND audioId = ?`;
    db.get(query, [userId, audioId], (err, row) => {
        if (err) {
            console.error('Error checking purchase record:', err.message);
            return res.status(500).json({ error: 'Failed to check purchase.' });
        }

        if (row) {
            res.status(200).json({ success: true });
        } else {
            res.status(404).json({ success: false });
        }
    });
});

module.exports = router;




authMiddleware


const jwt = require('jsonwebtoken');
const { findUserById } = require('../models/userModel');

const protect = (req, res, next) => {
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            token = req.headers.authorization.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            findUserById(decoded.id, (err, user) => {
                if (err || !user) {
                    return res.status(401).json({ message: 'Not authorized, token failed' });
                }
                req.user = user;
                next();
            });
        } catch (error) {
            return res.status(401).json({ message: 'Not authorized, token failed' });
        }
    }
    if (!token) {
        return res.status(401).json({ message: 'Not authorized, no token' });
    }
};

const admin = (req, res, next) => {
    if (req.user && req.user.isAdmin) {
        next();
    } else {
        res.status(401).json({ message: 'Not authorized as an admin' });
    }
};

module.exports = { protect, admin };










css

import React from 'react';
import { Link } from 'react-router-dom';
import './HomePage.css';
import Card from './Card';

const HomePage = () => {
    return (
        <div className="homepage">
            {/* Header Section */}
            <header className="header">
                <div className="logo-container">
                    <img src="/images/logo.JPG" alt="Rubric Logo" className="logo" />
                </div>
                <div className="header-content">
                    <h1>Welcome to <span className="highlight">Rubric</span></h1>
                    <p>Your go-to platform for learning and development.</p>
                    <div className="header-buttons">
                        <Link to="/login" className="btn">Login In</Link>
                        <Link to="/register" className="btn btn-primary">Sign Up</Link>
                    </div>
                </div>ohj\089
            </header>

            {/* Particle Effects */}
            <div className="particles">
                {[...Array(20)].map((_, i) => (
                    <div key={i} className={`particle particle-${i + 1}`}></div>
                ))}
            </div>

            {/* Card Section */}
            <section className="card-section">
                <h2 className="section-title">Explore Our Features</h2>
                <div className="card-container">
                    <Card 
                        title="LearnConnect" 
                        description="A platform where students prepare for classes and achieve academic victory." 
                        imageUrl="https://media.istockphoto.com/id/1353041652/photo/confident-developer-holding-book-and-laptop-walking-on-urban-street-handsome-smiling-african.jpg?s=612x612&w=0&k=20&c=cU102bLuZD0b9Xs-PtBcPMeNzZM-HI8sOoOWpR8JbwU="
                    />
                    <Card 
                        title="Knowledge Hub" 
                        description="An extensive repository of resources tailored for your success." 
                        imageUrl="https://media.istockphoto.com/id/1353041652/photo/confident-developer-holding-book-and-laptop-walking-on-urban-street-handsome-smiling-african.jpg?s=612x612&w=0&k=20&c=cU102bLuZD0b9Xs-PtBcPMeNzZM-HI8sOoOWpR8JbwU="
                    />
                    <Card 
                        title="Interactive Sessions" 
                        description="Join interactive sessions and learn from industry experts." 
                        imageUrl="https://media.istockphoto.com/id/1353041652/photo/confident-developer-holding-book-and-laptop-walking-on-urban-street-handsome-smiling-african.jpg?s=612x612&w=0&k=20&c=cU102bLuZD0b9Xs-PtBcPMeNzZM-HI8sOoOWpR8JbwU="
                    />
                </div>
            </section>

            {/* Footer Section */}
            <footer className="footer">
                <p>&copy; {new Date().getFullYear()} Rubric. All Rights Reserved.</p>
            </footer>
        </div>
    );
};

export default HomePage;

import React from 'react';
import { Link } from 'react-router-dom';
import './HomePage.css';

const HomePage = () => {
  return (
    <div className="homepage">
      {/* Header Section */}
      <header className="header">
        <div className="logo-container">
          <img src="/images/logo.JPG" alt="Rubric Logo" className="logo" />
        </div>
        <nav className="nav">
          <Link to="/login" className="btn login-btn">Login</Link>
          <Link to="/register" className="btn btn-primary signup-btn">Sign Up</Link>
        </nav>
      </header>

      {/* Main Content Section */}
      <main className="main-content">
        <div className="text-content">
          <h1>
            50+ Resources to <span className="highlight">Master</span>
          </h1>
          <p className="subtitle">Access tailored learning with defined growth.</p>
          <p className="description">
            Explore courses, interactive sessions, and exclusive content across
            various subjects. Choose how you want to learn â€” whether through
            structured lessons or hands-on practice â€” with your potential
            progress clearly outlined.
          </p>
          <Link to="/explore" className="btn btn-primary traders-hub">
            <span className="dot"></span> Explore Now
          </Link>
        </div>
        <div className="visual-content">
          <img
            src="/images/education.avif" // Replace with a phone mockup image
            alt="Rubric App Mockup"
            className="app-mockup"
          />

        </div>
      </main>

      {/* Footer Section */}
      <footer className="footer">
        <p>Â© {new Date().getFullYear()} Rubric. All Rights Reserved.</p>
      </footer>
    </div>
  );
};

export default HomePage;

import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import { AudioContext } from '../context/AudioContext';

const AudioPage = () => {
  const [audios, setAudios] = useState([]);
  const [filteredAudios, setFilteredAudios] = useState([]);
  const { level, courseId } = useParams();
  const navigate = useNavigate();
  const { purchasedAudios } = useContext(AudioContext);

  useEffect(() => {
    const fetchAudios = async () => {
      try {
        const response = await axios.get('https://learnconnect-backend.onrender.com/api/audios');
        console.log('Fetched audios:', response.data);
        setAudios(response.data);
      } catch (error) {
        console.error('Error fetching audios:', error);
      }
    };

    fetchAudios();
  }, []);

  useEffect(() => {
    console.log('Level:', level);
    console.log('Course ID:', courseId);

    if (audios.length > 0 && level != null && courseId != null) {
      console.log('Filtering with level:', level, 'courseId:', courseId);
      const filtered = audios.filter(audio =>
        audio.level != null && audio.courseId != null && 
        audio.level.toString() === level.toString() && audio.courseId.toString() === courseId.toString()
      );
      console.log('Filtered audios:', filtered);
      setFilteredAudios(filtered);
    }
  }, [audios, level, courseId]);

  const handleDownloadClick = (audioId) => {
    if (!purchasedAudios.includes(audioId)) {
      navigate(`/payment/${audioId}`);
    } else {
      navigate(`/download?audioId=${audioId}`);
    }
  };

  return (
    <div>
      <h1>Audio Page for Course ID: {courseId}, Level: {level}</h1>
      {filteredAudios.length > 0 ? (
        filteredAudios.map(audio => (
          <div key={audio.id}>
            <h2>{audio.title}</h2>
            <audio controls={purchasedAudios.includes(audio.id)} src={`https://learnconnect-backend.onrender.com${audio.url}`}>
              Your browser does not support the audio element.
            </audio>
            <button onClick={() => handleDownloadClick(audio.id)}>
              {purchasedAudios.includes(audio.id) ? 'Download' : 'Purchase'}
            </button>
          </div>
        ))
      ) : (
        <p>No audio files found for the selected criteria.</p>
      )}
    </div>
  );
};

export default AudioPage;

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { login } from "../api/api";
import "./LoginPage.css"; // Import CSS file

const LoginPage = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const backgroundImage = "/images/lg2.jpg"; // Set background image here

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    try {
      const response = await login({ email, password });
      localStorage.setItem("token", response.token);
      navigate("/profile");
    } catch (error) {
      console.error("Login failed", error);
      setError("Login failed. Please check your email and password.");
    }
  };

  return (
    <div className="login-page" style={{ "--bg-image": `url(${backgroundImage})` }}>
      <div className="floating-circle circle-large"></div>
      <div className="floating-circle circle-small"></div>

      <div className="floating-circle circle-large-top"></div>
      <div className="floating-circle circle-small-top"></div>

      <div className="login-container">
        <h2>Enter your email to continue</h2>
        <p>
          Log in with your account. If you donâ€™t have one, you will be prompted to create one.
        </p>

        <form onSubmit={handleSubmit}>
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <input
            type={showPassword ? "text" : "password"}
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <div className="show-password">
            <input
              type="checkbox"
              checked={showPassword}
              onChange={(e) => setShowPassword(e.target.checked)}
            />
            <label>Show Password</label>
          </div>
          <button type="submit" className="submit-btn">Continue</button>
        </form>

        {error && <p className="error-message">{error}</p>}

        <p className="help-text">
          Need help? <a href="#">Visit our Support Center</a>
        </p>
        <p className="terms-text">
          By logging in, you agree to our <a href="#">Terms of Service</a> and
          <a href="#"> Privacy Policy</a>.
        </p>
      </div>
    </div>
  );
};

export default LoginPage;

INSERT INTO purchases (userId, audioId, plan, expirationDate) 
VALUES (2, 1, '10-minutes', datetime('now', '+10 minutes'));

INSERT INTO purchases (userId, audioId, plan, expirationDate)
VALUES (2, 1, '10_minutes', datetime('now', '+10 minutes'));