import React, { useEffect, useState, useRef } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import { getUserProfile } from "../api/api";
import { FiMoreHorizontal, FiBookmark } from "react-icons/fi";
import { FaHome, FaSearch, FaPlus, FaCommentDots, FaUser, FaInfoCircle, FaCog, FaQuestionCircle, FaSignOutAlt } from "react-icons/fa";
import { HiUserCircle } from "react-icons/hi";
import "./ProfilePage.css";
import TutorialCard from "./TutorialCard"; // Import the TutorialCard component
import SuccessMessage from "./SuccessMessage"; // Import the SuccessMessage component
import AudioPlayer from "./AudioPlayer"; // Import the AudioPlayer component

const profileImages = [
  "/images/profile/profile1.jpg",
  "/images/profile/profile2.jpg",
  "/images/profile/profile3.jpg",
  "/images/profile/profile4.jpg",
  "/images/profile/profile5.jpg",
  "/images/profile/profile6.jpg",
  "/images/profile/profile7.jpg",
  "/images/profile/profile8.jpg",
  "/images/profile/profile9.jpg",
  "/images/profile/profile10.jpg"
];

const images = [
  "/images/k2 (1).jpeg",
  "/images/aesthetic/ae5.jpg",
  "/images/aesthetic/ae4.jpg",
  "/images/rd3.jpg",
  "/images/aesthetic/ae3.jpg"
];

const ProfilePage = () => {
  const [profile, setProfile] = useState(null);
  const [downloads, setDownloads] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSidebar, setShowSidebar] = useState(false);
  const [showName, setShowName] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showTutorial, setShowTutorial] = useState(false); // State to control tutorial visibility
  const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control success message visibility
  const [profileImageUrl, setProfileImageUrl] = useState("");
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("Fetching user profile");
        const token = localStorage.getItem("token");
        if (!token) throw new Error("No token found");
        const data = await getUserProfile(token);
        console.log("Fetched profile data:", data);
        setProfile(data);

        if (data.profileImage) {
          // Replace backslashes with forward slashes for web context and prepend backend server URL
          const formattedImageUrl = `http://localhost:5000/${data.profileImage.replace(/\\/g, "/")}`;
          console.log("Formatted profile image URL:", formattedImageUrl);
          setProfileImageUrl(formattedImageUrl);
        } else {
          setProfileImageUrl(getRandomImage());
        }

        fetchDownloads(); // Fetch downloads for user
      } catch (error) {
        console.error("Error fetching profile:", error);
        setError("Failed to fetch profile");
        navigate("/login");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [navigate]);

  useEffect(() => {
    if (location.state) {
      if (location.state.from === 'register') {
        setShowTutorial(true); // Show tutorial if coming from the register page
      } else if (location.state.from === 'payment') {
        setShowSuccessMessage(true); // Show success message if coming from the payment page
        setTimeout(() => {
          setShowSuccessMessage(false); // Hide success message after 3 seconds
        }, 3000);
      }

      // Clear location state to prevent showing tutorial or success message on refresh
      navigate(location.pathname, { replace: true, state: null });
    }
  }, [location.state, navigate]);

  const fetchDownloads = async () => {
    try {
      console.log("Fetching downloaded audios");
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found");

      const response = await fetch("http://localhost:5000/api/purchase/purchased-audios", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await response.json();
      console.log("Fetched downloads:", data);

      if (data.success) {
        // Convert relative URLs to absolute URLs
        const baseUrl = "http://localhost:5000";
        const audiosWithFullUrls = data.audios.map(audio => ({
          ...audio,
          url: audio.url.startsWith("http") ? audio.url : `${baseUrl}${audio.url}`
        }));

        // Filter out duplicate audios
        const uniqueAudios = Array.from(new Set(audiosWithFullUrls.map(a => a.id)))
          .map(id => audiosWithFullUrls.find(a => a.id === id));

        setDownloads(uniqueAudios);
        console.log("Unique audio files URLs:", uniqueAudios.map(audio => audio.url));  // Log unique audio file URLs
      } else {
        setDownloads([]);
      }
    } catch (err) {
      console.error("Error fetching downloads:", err);
      setError("Failed to load downloads");
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 6000); // 5 seconds zoom + 1 second transition
    return () => clearInterval(interval);
  }, []);

  const getRandomImage = () => {
    let storedImageIndex = localStorage.getItem("randomImageIndex");
    if (storedImageIndex === null) {
      // If no image index is found in local storage, generate a new random one
      storedImageIndex = Math.floor(Math.random() * profileImages.length);
      localStorage.setItem("randomImageIndex", storedImageIndex);
    }
    return profileImages[storedImageIndex];
  }

  const handleLogout = () => {
    localStorage.removeItem("token");
    navigate("/login");
  };

  return (
    <div className="container">
      {/* Header */}
      <header className="header">
        <h1>Profile Page</h1>
        <FiMoreHorizontal className="menu-icon" onClick={() => setShowSidebar(true)} />
        {profile && (
          <div
            className="profile-initial"
            onClick={() => setShowName(!showName)}
            onMouseEnter={() => setShowName(true)}
            onMouseLeave={() => setShowName(false)}
          >
            <img
              src={profileImageUrl}
              alt="Profile"
              className="profile-img"
              onError={(e) => {
                console.error("Profile image failed to load:", e);
                e.target.onerror = null;
                e.target.src = getRandomImage(); // Fallback to random image
              }}
            />
            {showName && <span className="profile-name">{profile.name}</span>}
          </div>
        )}
      </header>

      {/* Overlay Background */}
      <div className={`overlay ${showSidebar ? 'show' : ''}`} onClick={() => setShowSidebar(false)}></div>

      {/* Sidebar */}
      <div className={`sidebar ${showSidebar ? 'show' : ''}`}>
        <button className="close-btn" onClick={() => setShowSidebar(false)}>Ã—</button>
        
        {/* Wrap menu items */}
        <div className="menu-items">
            <Link to="/profile">
                <FaUser className="menu-icon" /> Profile
            </Link>
            <Link to="/about">
                <FaInfoCircle className="menu-icon" /> About Us
            </Link>
            <Link to="/settings">
                <FaCog className="menu-icon" /> Settings
            </Link>
            <Link to="/help">
                <FaQuestionCircle className="menu-icon" /> Help
            </Link>
        </div>

        {/* Logout at the bottom */}
        <button className="logout-btn" onClick={handleLogout}>
            <FaSignOutAlt className="menu-icon" /> Logout
        </button>
      </div>

      {/* Category Tabs */}
      <nav className="category-tabs">
        <span className="active">Leaf</span>
        <span>Sky</span>
        <span>Cloud</span>
        <span>Human</span>
      </nav>

      {/* Featured Image with Welcome Text */}
      <section className="featured-image">
        {images.map((image, index) => (
          <img
            key={index}
            src={image}
            alt={`Nature ${index + 1}`}
            className={index === currentImageIndex ? "active" : ""}
          />
        ))}
        <div className="featured-overlay"></div>
        {profile && (
          <div className="welcome-overlay">
            <h2>Welcome, {profile.name}</h2>
            <p>Explore a world of knowledge through audio learning.</p>
          </div>
        )}
      </section>

      {/* Profile Info */}
      {profile && (
        <div className="profile-card">
          <button
            className="enroll-btn"
            onClick={() => navigate("/levels")}
            disabled
          >
            ðŸ”“ï¸Ž Find Available Audios ðŸ”“ï¸Ž
          </button>
          <button
            className="enroll-btn"
            onClick={() => navigate("/jupeb-departments")}
          >
            Find JUPEB Audios
          </button>
        </div>
      )}

      {/* Downloads Section (Now with Audio Player) */}
      <section className="content">
        <h2>Your Purchased Audios</h2>
        {loading ? (
          <p>Loading...</p>
        ) : downloads.length > 0 ? (
          <div className="downloads-section">
            {downloads.map((item, index) => (
              <div className="download-item" key={index}>
                <h3>{item.title}</h3>
                <div className="download-info">
                  <AudioPlayer audioSrc={item.url} expirationDate={item.expirationDate} />
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="no-downloads">No available audio</p>
        )}
      </section>

      {/* Content Section */}
      <section className="content">
        <h2>study smart not hard with learn connect.</h2>
        <p> Take control of your academic journey stress-free. Learn at your own pace with audio lectures and connect with like-minded students. No physical classes, no Zoom meetings just flexible learning on your terms. With Learn Connect, you set the schedule and excel on your own time.</p>
        
        <div className="date-box">
          <span>LearnConnect 2025</span>
          <FiBookmark className="bookmark-icon" />
        </div>
      </section>

      {/* Gallery Section */}
      <section className="gallery">
        <div className="gallery-item">
          <img src="/images/registerimg.jpg" alt="Leaf 1" />
          <span>01</span>
        </div>
        <div className="gallery-item">
          <img src="/images/rd4.jpg" alt="Leaf 2" />
          <span>02</span>
        </div>
        <div className="gallery-item">
          <img src="/images/rd3.jpg" alt="Leaf 3" />
          <span>03</span>
        </div>
      </section>

      {/* Footer Navigation */}
      <footer className="footer-nav">
        <Link to="/profile"><FaHome className="nav-icon active" /></Link>
        <Link to="/search"><FaSearch className="nav-icon" /></Link>
        <Link to="/add"><FaPlus className="nav-icon" /></Link>
        <Link to="/messages"><FaCommentDots className="nav-icon" /></Link>
        <Link to="/user"><HiUserCircle className="nav-icon profile-icon" /></Link>
      </footer>

      {/* Tutorial Card */}
      {showTutorial && <TutorialCard onClose={() => setShowTutorial(false)} />}

      {/* Success Message */}
      {showSuccessMessage && <SuccessMessage />}
    </div>
  );
};

export default ProfilePage;


import React, { useState, useRef, useEffect } from "react";
import "./AudioPlayer.css";
import { FaPlay, FaPause } from "react-icons/fa";

function AudioPlayer({ audioSrc, expirationDate }) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const audioRef = useRef(null);

  const handlePlay = () => {
    audioRef.current.play();
    setIsPlaying(true);
  };

  const handlePause = () => {
    audioRef.current.pause();
    setIsPlaying(false);
  };

  const handlePlayPause = () => {
    if (isPlaying) {
      handlePause();
    } else {
      handlePlay();
    }
  };

  const handleTimeUpdate = () => {
    setCurrentTime(audioRef.current.currentTime);
    setDuration(audioRef.current.duration);
  };

  const handleSeek = (e) => {
    audioRef.current.currentTime = e.target.value;
    setCurrentTime(e.target.value);
  };

  const handleAudioEnd = () => {
    setIsPlaying(false);
    setCurrentTime(0);
    audioRef.current.currentTime = 0;
  };

  function formatDuration(durationSeconds) {
    const minutes = Math.floor(durationSeconds / 60);
    const seconds = Math.floor(durationSeconds % 60);
    const formattedSeconds = seconds.toString().padStart(2, "0");
    return `${minutes}:${formattedSeconds}`;
  }

  function formatExpirationDate(dateString) {
    if (!dateString) {
      console.error("Expiration date is undefined or empty");
      return "No expiration date";
    }
    console.log("Raw expiration date:", dateString);
    const timestamp = Date.parse(dateString);
    console.log("Parsed timestamp:", timestamp);
    if (isNaN(timestamp)) {
      return "Invalid Date";
    }
    const date = new Date(timestamp);
    return date.toLocaleDateString();
  }

  useEffect(() => {
    const audioElement = audioRef.current;
    audioElement.addEventListener("timeupdate", handleTimeUpdate);
    audioElement.addEventListener("ended", handleAudioEnd);
    return () => {
      audioElement.removeEventListener("timeupdate", handleTimeUpdate);
      audioElement.removeEventListener("ended", handleAudioEnd);
    };
  }, []);

  return (
    <div className="player-card">
      <img 
        src="/images/aesthetic/ae6.jpg" 
        alt="Cover Image" 
        className={isPlaying ? "player-card-image spinning" : "player-card-image"}
      />

      <input
        type="range"
        min="0"
        max={duration}
        value={currentTime}
        onChange={handleSeek}
      />

      <audio ref={audioRef} src={audioSrc} />

      <div className="track-duration">
        <p>{formatDuration(currentTime)}</p>
        <p>{formatDuration(duration)}</p>
      </div>

      <button onClick={handlePlayPause} className="play-pause-button">
         {isPlaying ? <FaPause /> : <FaPlay />}
      </button>

      <div className="expiration-date">
        <p>Expires on: {formatExpirationDate(expirationDate)}</p>
      </div>
    </div>
  );
}

export default AudioPlayer;

import React, { useEffect, useState, useRef } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import { getUserProfile } from "../api/api";
import { FiMoreHorizontal, FiBookmark } from "react-icons/fi";
import { FaHome, FaSearch, FaPlus, FaCommentDots, FaUser, FaInfoCircle, FaCog, FaQuestionCircle, FaSignOutAlt } from "react-icons/fa";
import { HiUserCircle } from "react-icons/hi";
import "./ProfilePage.css";
import TutorialCard from "./TutorialCard"; // Import the TutorialCard component
import SuccessMessage from "./SuccessMessage"; // Import the SuccessMessage component
import AudioPlayer from "./AudioPlayer"; // Import the AudioPlayer component

const profileImages = [
  "/images/profile/profile1.jpg",
  "/images/profile/profile2.jpg",
  "/images/profile/profile3.jpg",
  "/images/profile/profile4.jpg",
  "/images/profile/profile5.jpg",
  "/images/profile/profile6.jpg",
  "/images/profile/profile7.jpg",
  "/images/profile/profile8.jpg",
  "/images/profile/profile9.jpg",
  "/images/profile/profile10.jpg"
];

const images = [
  "/images/k2 (1).jpeg",
  "/images/aesthetic/ae5.jpg",
  "/images/aesthetic/ae4.jpg",
  "/images/rd3.jpg",
  "/images/aesthetic/ae3.jpg"
];

const ProfilePage = () => {
  const [profile, setProfile] = useState(null);
  const [downloads, setDownloads] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSidebar, setShowSidebar] = useState(false);
  const [showName, setShowName] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showTutorial, setShowTutorial] = useState(false); // State to control tutorial visibility
  const [showSuccessMessage, setShowSuccessMessage] = useState(false); // State to control success message visibility
  const [profileImageUrl, setProfileImageUrl] = useState("");
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        console.log("Fetching user profile");
        const token = localStorage.getItem("token");
        if (!token) throw new Error("No token found");
        const data = await getUserProfile(token);
        console.log("Fetched profile data:", data);
        setProfile(data);

        if (data.profileImage) {
          // Replace backslashes with forward slashes for web context and prepend backend server URL
          const formattedImageUrl = `http://localhost:5000/${data.profileImage.replace(/\\/g, "/")}`;
          console.log("Formatted profile image URL:", formattedImageUrl);
          setProfileImageUrl(formattedImageUrl);
        } else {
          setProfileImageUrl(getRandomImage());
        }

        fetchDownloads(); // Fetch downloads for user
      } catch (error) {
        console.error("Error fetching profile:", error);
        setError("Failed to fetch profile");
        navigate("/login");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [navigate]);

  useEffect(() => {
    if (location.state) {
      if (location.state.from === 'register') {
        setShowTutorial(true); // Show tutorial if coming from the register page
      } else if (location.state.from === 'payment') {
        setShowSuccessMessage(true); // Show success message if coming from the payment page
        setTimeout(() => {
          setShowSuccessMessage(false); // Hide success message after 3 seconds
        }, 3000);
      }

      // Clear location state to prevent showing tutorial or success message on refresh
      navigate(location.pathname, { replace: true, state: null });
    }
  }, [location.state, navigate]);

  const fetchDownloads = async () => {
    try {
      console.log("Fetching downloaded audios");
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found");

      const response = await fetch("http://localhost:5000/api/purchase/purchased-audios", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await response.json();
      console.log("Fetched downloads:", data);

      if (data.success) {
        // Convert relative URLs to absolute URLs
        const baseUrl = "http://localhost:5000";
        const audiosWithFullUrls = data.audios.map(audio => ({
          ...audio,
          url: audio.url.startsWith("http") ? audio.url : `${baseUrl}${audio.url}`
        }));

        // Filter out duplicate audios
        const uniqueAudios = Array.from(new Set(audiosWithFullUrls.map(a => a.id)))
          .map(id => audiosWithFullUrls.find(a => a.id === id));

        setDownloads(uniqueAudios);
        console.log("Unique audio files URLs:", uniqueAudios.map(audio => audio.url));  // Log unique audio file URLs
      } else {
        setDownloads([]);
      }
    } catch (err) {
      console.error("Error fetching downloads:", err);
      setError("Failed to load downloads");
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 6000); // 5 seconds zoom + 1 second transition
    return () => clearInterval(interval);
  }, []);

  const getRandomImage = () => {
    let storedImageIndex = localStorage.getItem("randomImageIndex");
    if (storedImageIndex === null) {
      // If no image index is found in local storage, generate a new random one
      storedImageIndex = Math.floor(Math.random() * profileImages.length);
      localStorage.setItem("randomImageIndex", storedImageIndex);
    }
    return profileImages[storedImageIndex];
  }

  const handleLogout = () => {
    localStorage.removeItem("token");
    navigate("/login");
  };

  return (
    <div className="container">
      {/* Header */}
      <header className="header">
        <h1>Profile Page</h1>
        <FiMoreHorizontal className="menu-icon" onClick={() => setShowSidebar(true)} />
        {profile && (
          <div
            className="profile-initial"
            onClick={() => setShowName(!showName)}
            onMouseEnter={() => setShowName(true)}
            onMouseLeave={() => setShowName(false)}
          >
            <img
              src={profileImageUrl}
              alt="Profile"
              className="profile-img"
              onError={(e) => {
                console.error("Profile image failed to load:", e);
                e.target.onerror = null;
                e.target.src = getRandomImage(); // Fallback to random image
              }}
            />
            {showName && <span className="profile-name">{profile.name}</span>}
          </div>
        )}
      </header>

      {/* Overlay Background */}
      <div className={`overlay ${showSidebar ? 'show' : ''}`} onClick={() => setShowSidebar(false)}></div>

      {/* Sidebar */}
      <div className={`sidebar ${showSidebar ? 'show' : ''}`}>
        <button className="close-btn" onClick={() => setShowSidebar(false)}>Ã—</button>
        
        {/* Wrap menu items */}
        <div className="menu-items">
            <Link to="/profile">
                <FaUser className="menu-icon" /> Profile
            </Link>
            <Link to="/about">
                <FaInfoCircle className="menu-icon" /> About Us
            </Link>
            <Link to="/settings">
                <FaCog className="menu-icon" /> Settings
            </Link>
            <Link to="/help">
                <FaQuestionCircle className="menu-icon" /> Help
            </Link>
        </div>

        {/* Logout at the bottom */}
        <button className="logout-btn" onClick={handleLogout}>
            <FaSignOutAlt className="menu-icon" /> Logout
        </button>
      </div>

      {/* Category Tabs */}
      <nav className="category-tabs">
        <span className="active">Leaf</span>
        <span>Sky</span>
        <span>Cloud</span>
        <span>Human</span>
      </nav>

      {/* Featured Image with Welcome Text */}
      <section className="featured-image">
        {images.map((image, index) => (
          <img
            key={index}
            src={image}
            alt={`Nature ${index + 1}`}
            className={index === currentImageIndex ? "active" : ""}
          />
        ))}
        <div className="featured-overlay"></div>
        {profile && (
          <div className="welcome-overlay">
            <h2>Welcome, {profile.name}</h2>
            <p>Explore a world of knowledge through audio learning.</p>
          </div>
        )}
      </section>

      {/* Profile Info */}
      {profile && (
        <div className="profile-card">
          <button
            className="enroll-btn"
            onClick={() => navigate("/levels")}
            disabled
          >
            ðŸ”“ï¸Ž Find Available Audios ðŸ”“ï¸Ž
          </button>
          <button
            className="enroll-btn"
            onClick={() => navigate("/jupeb-departments")}
          >
            Find JUPEB Audios
          </button>
        </div>
      )}

      {/* Downloads Section (Now with Audio Player) */}
      <section className="content">
        <h2>Your Purchased Audios</h2>
        {loading ? (
          <p>Loading...</p>
        ) : downloads.length > 0 ? (
          <div className="downloads-section">
            {downloads.map((item, index) => (
              <div className="download-item" key={index}>
                <h3>{item.title}</h3>
                <div className="download-info">
                  <AudioPlayer audioSrc={item.url} />
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="no-downloads">No available audio</p>
        )}
      </section>

      {/* Content Section */}
      <section className="content">
        <h2>study smart not hard with learn connect.</h2>
        <p> Take control of your academic journey stress-free. Learn at your own pace with audio lectures and connect with like-minded students. No physical classes, no Zoom meetings just flexible learning on your terms. With Learn Connect, you set the schedule and excel on your own time.</p>
        
        <div className="date-box">
          <span>LearnConnect 2025</span>
          <FiBookmark className="bookmark-icon" />
        </div>
      </section>

      {/* Gallery Section */}
      <section className="gallery">
        <div className="gallery-item">
          <img src="/images/registerimg.jpg" alt="Leaf 1" />
          <span>01</span>
        </div>
        <div className="gallery-item">
          <img src="/images/rd4.jpg" alt="Leaf 2" />
          <span>02</span>
        </div>
        <div className="gallery-item">
          <img src="/images/rd3.jpg" alt="Leaf 3" />
          <span>03</span>
        </div>
      </section>

      {/* Footer Navigation */}
      <footer className="footer-nav">
        <Link to="/profile"><FaHome className="nav-icon active" /></Link>
        <Link to="/search"><FaSearch className="nav-icon" /></Link>
        <Link to="/add"><FaPlus className="nav-icon" /></Link>
        <Link to="/messages"><FaCommentDots className="nav-icon" /></Link>
        <Link to="/user"><HiUserCircle className="nav-icon profile-icon" /></Link>
      </footer>

      {/* Tutorial Card */}
      {showTutorial && <TutorialCard onClose={() => setShowTutorial(false)} />}

      {/* Success Message */}
      {showSuccessMessage && <SuccessMessage />}
    </div>
  );
};

export default ProfilePage;

import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom"; // Import useNavigate
import "./ChatBoxCard.css";

const departments = {
  "Management Science": [
    "Accounting",
    "Business Studies",
    "Maths",
    "Economics",
    "Government",
    "Geography",
    "Sociology",
  ],
  "Arts": [
    "Arabic",
    "Government",
    "Hausa",
    "Islamic Religious Studies",
    "History",
    "Christian Religious Studies",
    "Yoruba",
  ],
  "Law": [
    "History",
    "Literature",
    "Islamic Religious Studies",
    "Christian Religious Studies",
    "Arabic",
  ],
  "Medicine": ["Biology", "Chemistry", "Maths", "Physics"],
  "Physical Sciences": ["Biology", "Physical Sciences"],
};

const jupebCourseIdMapping = {
  "Accounting": 65,
  "Business Studies": 66,
  "Maths (Management Science)": 67,
  "Economics": 68,
  "Government": 69,
  "Geography": 70,
  "Sociology": 71,
  "Arabic": 72,
  "Hausa": 73,
  "Islamic Religious Studies": 74,
  "History (jupeb)": 76, // âœ… Changed to avoid conflict with CRS
  "Christian Religious Studies": 75, // âœ… Matched with admin page
  "Yoruba": 77,
  "Literature": 78,
  "Biology (Medicine)": 79,
  "Chemistry": 80,
  "Maths (Medicine)": 83,
  "Physics": 81,
  "Biology (Physical Sciences)": 82,
  "Physical Sciences": 84,
};

const ChatBoxCard = ({ onClose }) => {
  const [courseName, setCourseName] = useState("");
  const [searchResult, setSearchResult] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate(); // Initialize useNavigate

  useEffect(() => {
    // Show overlay when component mounts
    const overlay = document.querySelector(".chat-box-overlay");
    if (overlay) {
      overlay.style.display = "block";
    }

    // Hide overlay when component unmounts
    return () => {
      if (overlay) {
        overlay.style.display = "none";
      }
    };
  }, []);

  const toTitleCase = (str) => {
    return str.replace(
      /\w\S*/g,
      (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
    );
  };

  const getDepartmentByCourse = (course) => {
    for (const [department, courses] of Object.entries(departments)) {
      if (courses.includes(course)) {
        return department;
      }
    }
    return null;
  };

  const handleCourseSelection = (course) => {
    const courseId = jupebCourseIdMapping[course];
    const department = getDepartmentByCourse(course);
    if (courseId && department) {
      navigate(`/audios/jupeb/${department}/${courseId}`);
    } else {
      console.error("Invalid course or department selected");
    }
  };

  const handleInputChange = async (e) => {
    const value = e.target.value;
    const normalizedValue = toTitleCase(value);
    setCourseName(value);
    setIsLoading(true);
    setSearchResult("");

    if (normalizedValue.trim() === "") {
      setIsLoading(false);
      return;
    }

    const courseExists = jupebCourseIdMapping.hasOwnProperty(normalizedValue);
    if (!courseExists) {
      setSearchResult(`Sorry, course "${value}" unavailable.`);
      setIsLoading(false);
      return;
    }

    const courseId = jupebCourseIdMapping[normalizedValue];
    const endpoint = `http://localhost:5000/api/audios`;

    try {
      const response = await axios.get(endpoint);
      const data = response.data;
      if (data && data.length > 0) {
        const filteredAudios = data.filter(audio => audio.courseId.toString() === courseId.toString());
        const audioCount = filteredAudios.length;
        if (audioCount > 0) {
          setSearchResult(
            <div>
              <p>There are <span className="audio-count">{audioCount}</span> available audio courses for <span className="course-name">{value.toUpperCase()}</span>.</p>
              <button className="chat-box-card-btn" onClick={() => handleCourseSelection(normalizedValue)}>Go to Audio Page</button>
            </div>
          );
        } else {
          setSearchResult(`No audio for "${value}" currently available.`);
        }
      } else {
        setSearchResult(`No audio for "${value}" currently available.`);
      }
    } catch (error) {
      console.error("Error fetching audios:", error);
      setSearchResult("Error fetching audios, please try again later.");
    }
    setIsLoading(false);
  };

  const handleClose = () => {
    const card = document.querySelector(".chat-box-card");
    const overlay = document.querySelector(".chat-box-overlay");

    if (card) {
      card.style.animation = "slideOutRight 0.6s ease forwards";
      setTimeout(() => {
        if (overlay) {
          overlay.style.display = "none";
        }
        onClose();
      }, 600); // Match the duration of the slideOutRight animation
    }
  };

  return (
    <>
      <div className="chat-box-overlay"></div>
      <div className="chat-box-card">
        <button className="close-btn" onClick={handleClose}>Ã—</button>
        <h1>Having trouble finding your courses ?</h1>
        
        <p>Find your courses and avaible audios easier.</p>
        <input
          type="text"
          value={courseName}
          onChange={handleInputChange}
          placeholder="Type course name..."
        />
        {isLoading ? <div className="loading-spinner"></div> : <div>{searchResult}</div>}
      </div>
    </>
  );
};

export default ChatBoxCard;